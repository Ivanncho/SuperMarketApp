
@inject IViewCategoryUseCase ViewCategoryUseCase
@inject IViewProductsByCategoryIdUseCase ViewProductsByCategoryIdUseCase

<div class="form-group">
    <label for="category">Category</label>
    <select id="category" @bind="SelectedCategoryId" class="form-control">
        <option selected></option>
        @foreach (var cat in categories)
        {
            <option value="@cat.CategoryId">@cat.Name</option>
        }
    </select>
</div>

@if (productsInCategory != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in productsInCategory)
            {
                <tr @onclick="@(() => OnSelectProduct(prod))" style="cursor:pointer">
                    <td>@prod.Name</td>
                    <td>@prod.Quantity</td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
    private IEnumerable<Product> productsInCategory;
    [Parameter]
    public EventCallback<Product> OnProductSelected { get; set; }

    private int selectedCategoryId;
    public int SelectedCategoryId
    {
        get
        {
            return selectedCategoryId;
        }
        set
        {
            selectedCategoryId = value;
            productsInCategory = ViewProductsByCategoryIdUseCase.Execute(value);
            StateHasChanged();
        }
    }

    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        categories = ViewCategoryUseCase.Execute();
    }
    private void OnSelectProduct(Product product)
    {
        OnProductSelected.InvokeAsync(product);
    }

}